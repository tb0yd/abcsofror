<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abcsofror.com</title>
    <link>http://abcsofror.com/</link>
    <atom:link href="http://coyled.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>stuff from coyled</description>
    <language>en-us</language>
    <pubDate>Thu, 23 Aug 2012 11:45:57 -0400</pubDate>
    <lastBuildDate>Thu, 23 Aug 2012 11:45:57 -0400</lastBuildDate>

    
    <item>
      <title>G is for gems</title>
      <link>http://coyled.comg.html</link>
      <pubDate>Wed, 22 Aug 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./g</guid>
      <description>&lt;h4 id='theres_a_gem_for_that'&gt;There&amp;#8217;s a gem for that&lt;/h4&gt;

&lt;p&gt;The Ruby community is built on the open-source philosophy. This means the Ruby developer can freely download and re-use other developers&amp;#8217; code in their own projects with no fear of legal consequences. And since the Ruby community has been around for a number of years, solutions to most common problems are already available for download in packages called &amp;#8220;gems&amp;#8221;. Rails itself is packaged and distributed as several gems.&lt;/p&gt;

&lt;p&gt;Here are some examples of problems I&amp;#8217;ve had to solve in Rails apps using gems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Admin interface&lt;/strong&gt;: ActiveAdmin&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: Devise&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: CanCan&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Browser testing&lt;/strong&gt;: Capybara&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Fixture replacement&lt;/strong&gt;: FactoryGirl&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Javascript testing&lt;/strong&gt;: Jasmine&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Pagination&lt;/strong&gt;: WillPaginate&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Versioning&lt;/strong&gt;: PaperTrail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These and many others can be found by browsing &lt;a href='http://www.ruby-toolbox.com'&gt;Ruby Toolbox&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id='careful_consideration'&gt;Careful consideration&lt;/h4&gt;

&lt;p&gt;It can be very empowering to find out just what you can add to your project by including third-party code. However, when considering whether or not to include a gem, always ask yourself these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is the gem currently being maintained?&lt;/strong&gt; The absence of an active developer supporting the gem is a big sign that it&amp;#8217;s going to cause trouble for you later on.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How popular is the gem?&lt;/strong&gt; It may sound superficial, but lots of users means lots of testing, lots of bug reports, lots of blog posts, etc.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How do you feel about the source code?&lt;/strong&gt; Since Ruby is an interpreted language, you can actually go read the source code of each gem yourself. How would you feel if you had to make some changes, add tests, etc.?&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How is the gem used?&lt;/strong&gt; Sometimes gems add very little to a project other than a spiffy API. Look for specific examples in the docs for how the gem is used; does it mesh well with your code?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='bundler'&gt;Bundler&lt;/h4&gt;

&lt;p&gt;The way to include a gem in your project is very simple; just go to your project&amp;#8217;s gem file (located at ./Gemfile) and add a line like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;  &lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;sass&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;which (obviously) adds the Sass gem. If you want to require at least version 3.0.0 (without preventing future updates), you can write:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;  &lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;sass&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;gt;=3.0.0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then, to install the gem, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Bundler isn&amp;#8217;t installed, you may have to run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install bundler&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bundler also provides some shell commands which may help:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bundle show &lt;em&gt;(gem)&lt;/em&gt;&lt;/strong&gt;: Show the source location of a particular gem in the bundle.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;bundle install &lt;em&gt;(gem)&lt;/em&gt;&lt;/strong&gt;: Install the gems specified by the Gemfile or Gemfile.lock.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;bundle update &lt;em&gt;(gem)&lt;/em&gt;&lt;/strong&gt;: Update dependencies to their latest version.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;bundle open &lt;em&gt;(gem)&lt;/em&gt;&lt;/strong&gt;: Open an installed gem in the editor.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;bundle package &lt;em&gt;(gem)&lt;/em&gt;&lt;/strong&gt;: Package the .gem files required by your application into the vendor/cache directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above commands (and others) can be displayed by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle --help&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>F is for functional programming</title>
      <link>http://coyled.comf.html</link>
      <pubDate>Sat, 02 Jun 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./f</guid>
      <description>&lt;h4 id='languages_and_paradigms'&gt;Languages and paradigms&lt;/h4&gt;

&lt;p&gt;The Ruby language supports multiple &lt;em&gt;programming paradigms&lt;/em&gt;, or programming styles, and functional programming is one of them.&lt;/p&gt;

&lt;p&gt;Like other paradigms (such as object-oriented programming), there are advanced users and there are beginners. But since this style of programming is so widely used in the Ruby community, it&amp;#8217;s important for anyone learning Rails to know the basics.&lt;/p&gt;

&lt;h4 id='blocks'&gt;Blocks&lt;/h4&gt;

&lt;p&gt;Here&amp;#8217;s some Ruby code that generates HTML for comments on a post:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;hr /&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8230;and stores it in the &amp;#8220;result&amp;#8221; variable.&lt;/p&gt;

&lt;p&gt;The code above uses the Array#each method, which takes a &lt;em&gt;block&lt;/em&gt;. A block is a chunk of Ruby code that appears between &amp;#8220;do&amp;#8221; and &amp;#8220;end,&amp;#8221; or is surrounded by curly braces:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;hr /&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;A block can itself take an argument, as in this example with the &amp;#8220;comment&amp;#8221; argument.&lt;/p&gt;

&lt;h4 id='more_array_methods'&gt;More array methods&lt;/h4&gt;

&lt;p&gt;Array#each is only one of several core Ruby methods that take blocks. For example, say you want to filter all comments that contain certain a keyword. You can do this using Array#select:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;relevant_comments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;select&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;include?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;keyword&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And if you want to clean the comments from any HTML formatting, you might do so using Array#map:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;plaintext_comments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;sanitize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h4 id='chaining'&gt;Chaining&lt;/h4&gt;

&lt;p&gt;It really gets interesting when you start chaining these methods together:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;plaintext_relevant_comments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;select&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;include?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;keyword&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;sanitize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h4 id='other_languages'&gt;Other languages&lt;/h4&gt;

&lt;p&gt;Functional programming can be used in other languages as well. For example, many of these methods are available in Javascript with Jeremy Ashkenas&amp;#8217; &lt;strong&gt;underscore.js&lt;/strong&gt; (which in turn borrows from Oliver Steele&amp;#8217;s &lt;strong&gt;Functional&lt;/strong&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;    &lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;post&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;comments&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;each&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;comment&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;comment&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;body&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;lt;hr /&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>E is for ERb</title>
      <link>http://coyled.come.html</link>
      <pubDate>Sun, 20 May 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./e</guid>
      <description>&lt;h4 id='preamble_erb_vs_haml'&gt;Preamble: ERb vs. Haml&lt;/h4&gt;

&lt;p&gt;Some Rubyists may be less than pleased to see ERb featured here rather than Haml. It&amp;#8217;s a topic of hot debate among Rails enthusiasts. I myself am quite impartial, having used both ERb and Haml in a production environment. Both are viable formats for your views, and there are pros and cons to both.&lt;/p&gt;

&lt;p&gt;However, ERb is given preference here because the barrier to entry is lower and because I already picked HTTP for the &amp;#8220;H&amp;#8221; article.&lt;/p&gt;

&lt;h4 id='syntax'&gt;Syntax&lt;/h4&gt;

&lt;p&gt;ERb is one Rails solution for interpolating server-side code in HTML. This will be your main way of including dynamic data in your website.&lt;/p&gt;

&lt;p&gt;The syntax is similar to other server-side web frameworks: &amp;lt;%= %&amp;gt; signifies that the enclosed code is Ruby and should be evaluated. For example, the following code:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='erb'&gt;&lt;span class='x'&gt;    &amp;lt;p&amp;gt;This post has &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x'&gt; comments.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8230;changes into this HTML when @post has 3 comments:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This post has 3 comments.&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id='looping'&gt;Looping&lt;/h4&gt;

&lt;p&gt;ERb also allows for more complex types of interpolation with the &amp;lt;% %&amp;gt; syntax. For example:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='erb'&gt;&lt;span class='x'&gt;    &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%&lt;/span&gt; &lt;span class='vi'&gt;@post&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;comments&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;span class='x'&gt;      &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='n'&gt;comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='x'&gt;      &amp;lt;hr /&amp;gt;&lt;/span&gt;
&lt;span class='x'&gt;    &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8230;will change into something like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;      &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First post!&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;&amp;lt;hr&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I like pancakes&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;&amp;lt;hr&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blaaaah&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;&amp;lt;hr&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;ve ever worked with ASP.net or JSP, this is nothing new.&lt;/p&gt;

&lt;h4 id='passing_blocks'&gt;Passing blocks&lt;/h4&gt;

&lt;p&gt;You can also pass blocks of HTML as if they are blocks of code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='erb'&gt;&lt;span class='x'&gt;    &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='n'&gt;form_for&lt;/span&gt; &lt;span class='no'&gt;Comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;span class='x'&gt;      &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;label&lt;/span&gt; &lt;span class='ss'&gt;:body&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x'&gt;:&lt;/span&gt;
&lt;span class='x'&gt;      &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;text_area&lt;/span&gt; &lt;span class='ss'&gt;:body&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;

&lt;span class='x'&gt;      &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;submit&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;span class='x'&gt;    &lt;/span&gt;&lt;span class='cp'&gt;&amp;lt;%&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt; &lt;span class='cp'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;which renders a fully-functional HTML form.&lt;/p&gt;

&lt;h4 id='serverside_vs_clientside'&gt;Server-side vs. client-side&lt;/h4&gt;

&lt;p&gt;The upside to ERb (and Haml) is that it&amp;#8217;s a fully server-side technology &amp;#8211; your users won&amp;#8217;t need to execute the code on their browsers or even know that it exists. You have full control over who has access to the code and over the environment in which the code is executed. That generally makes it much safer, faster, and easier to implement than a comparable solution in Flash or AJAX.&lt;/p&gt;

&lt;p&gt;The downside is that you will be serving different data from the same URL, so it will be harder to take advantage of HTTP&amp;#8217;s built-in caching mechanisms. It also becomes more difficult to track exactly which content is being shown to which users. User experience is also affected as the user must reload the page to see changes in dynamic data. So, many Rails developers choose to display dynamic data with AJAX to address these problems.&lt;/p&gt;

&lt;p&gt;In my opinion, the best way to deliver dynamic data will vary from project to project and even from page to page. So the responsibility must fall on the developer to take all these concerns into consideration and implement the best solution every time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>D is for databases</title>
      <link>http://coyled.comd.html</link>
      <pubDate>Wed, 16 May 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./d</guid>
      <description>&lt;h4 id='introducing_the_shell'&gt;Introducing the shell&lt;/h4&gt;

&lt;p&gt;Rails doesn&amp;#8217;t come with a database built-in, but instead offers an interface to your database via the Unix shell. You can run shell commands on the Linux or OS X terminal, or on Windows using Cygwin.&lt;/p&gt;

&lt;p&gt;In this guide (and many other websites), shell commands are prefixed by a dollar sign in order to distinguish them from Ruby code. The dollar sign is not part of the command.&lt;/p&gt;

&lt;h4 id='setup'&gt;Setup&lt;/h4&gt;

&lt;p&gt;The command for setting up your development database is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake db:create&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to set up databases for other environments, you can do so using the environment variable RAILS_ENV:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ RAILS_ENV=test rake db:create&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, you can set them all up at once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake db:create:all&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='migrations'&gt;Migrations&lt;/h4&gt;

&lt;p&gt;Migrations are a way to change the &lt;em&gt;schema&lt;/em&gt;, or structure of your database. For example, the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g migration CreatePostsTable&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#8230;prints this output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  invoke  active_record
  create    db/migrate/20120516155552_create_posts_table.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#8230;and creates this migration file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;CreatePostsTable&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;ActiveRecord&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Migration&lt;/span&gt;
      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;change&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can then write Rails code in this file that alters your database.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;CreatePostsTable&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;ActiveRecord&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Migration&lt;/span&gt;
      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;change&lt;/span&gt;
        &lt;span class='n'&gt;create_table&lt;/span&gt; &lt;span class='ss'&gt;:posts&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
          &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='ss'&gt;:title&lt;/span&gt;
          &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;text&lt;/span&gt; &lt;span class='ss'&gt;:body&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can run this migration like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake db:migrate&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Migrations can also be reverted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake db:migrate:down VERSION=20120516155552&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='shell_shock'&gt;Shell shock&lt;/h4&gt;

&lt;p&gt;The shell has its own set of challenges. If you aren&amp;#8217;t used to working with the shell, you may still be trying to get &amp;#8220;rake&amp;#8221; to work on Cygwin, or trying to install the MySQL dev package on your Linux distro, or even just pasting error messages into Google and running random commands from anonymous people. For someone who&amp;#8217;s new to all this, it can be pretty aggravating.&lt;/p&gt;

&lt;p&gt;At my first company, our team included Java developers, Javascript developers, DBAs, UI designers, Rails developers, and two senior architects. I myself was hired as a Javascript programmer, and only learned Rails when the company decided they didn&amp;#8217;t need to write any more Javascript. After we switched to an all-Rails stack, I saw a twelve-person dev team shrink to essentially one person (not me) doing 95% of the work.&lt;/p&gt;

&lt;p&gt;So if you find yourself asking, &amp;#8220;why can&amp;#8217;t I just write some flipping code!?&amp;#8221;, then understand that you are simply doing the work of up to twelve people.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C is for cross-site request forgery</title>
      <link>http://coyled.comc.html</link>
      <pubDate>Mon, 14 May 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./c</guid>
      <description>&lt;h4 id='what_csrf_is'&gt;What CSRF is&lt;/h4&gt;

&lt;p&gt;Cross-site request forgery (CSRF) is when a victim is tricked into sending a malicious HTTP request from his own computer.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s easier than it sounds. Say a person logs into Doofusbank.com. Then he clicks a link from a suspicious email, which loads a page on Evilwebsite.com, which sends a funds transfer request to Doofusbank.com. Since he&amp;#8217;s logged in, there&amp;#8217;s a risk that Doofusbank.com might accept this forged request, unless they have protection against CSRF.&lt;/p&gt;

&lt;h4 id='csrf_protection_in_rails'&gt;CSRF protection in Rails&lt;/h4&gt;

&lt;p&gt;CSRF is a common and well-known problem for web applications. Rails&amp;#8217; CSRF protection is activated by placing this code in the controller:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;     &lt;span class='n'&gt;protect_from_forgery&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are three components in Rails&amp;#8217; CSRF protection:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The hidden &amp;#8220;authenticity_token&amp;#8221; field&lt;/li&gt;

&lt;li&gt;The &amp;#8220;X-CSRF-Token&amp;#8221; HTTP header&lt;/li&gt;

&lt;li&gt;The token value in the session&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id='the_hidden_authenticity_token_field'&gt;The hidden &amp;#8220;authenticity_token&amp;#8221; field&lt;/h4&gt;

&lt;p&gt;The first factor to consider is a hidden form field that Rails includes in the &lt;a href='http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_for'&gt;form_for&lt;/a&gt; helper:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;      &lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;input&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;authenticity_token&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;l/jRTWlC4lhJg6355yj/Kqqb8u6fdHfN1ufDU+KU1I8=&amp;quot;&lt;/span&gt; &lt;span class='sr'&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This hidden field only appears for POST requests &amp;#8211; GET requests are not protected from CSRF.&lt;/p&gt;

&lt;h4 id='the_xcsrftoken_http_header'&gt;The &amp;#8220;X-CSRF-Token&amp;#8221; HTTP header&lt;/h4&gt;

&lt;p&gt;Rails can be configured to send the authenticity token in the header of every AJAX call as well. If so, the headers of your AJAX calls should contain a line that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  X-CSRF-Token: l/jRTWlC4lhJg6355yj/Kqqb8u6fdHfN1ufDU+KU1I8=&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='the_session'&gt;The session&lt;/h4&gt;

&lt;p&gt;Whether the token comes from the hidden field or the header, it has to match the token in the user&amp;#8217;s &lt;em&gt;session&lt;/em&gt; in order to pass CSRF protection.&lt;/p&gt;

&lt;p&gt;By default, Rails stores the session in a cookie. This is the fastest option, but due to the lack of encryption, it&amp;#8217;s also the least secure. If you need more security, Rails can be configured to encrypt the cookie. For even more security, you can skip the cookie altogether and store the session in the database.&lt;/p&gt;

&lt;h4 id='study_questions'&gt;Study Questions&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;What are the three components in Rails CSRF?&lt;/li&gt;

&lt;li&gt;Using the fastest and least secure configuration, which of the three components are stored on the client?&lt;/li&gt;

&lt;li&gt;Describe the response of a Rails server when a client submits an invalid CSRF token.&lt;/li&gt;

&lt;li&gt;Explain why GET requests are not protected from CSRF.&lt;/li&gt;

&lt;li&gt;CSRF is only one attack vector on the internet. Identify at least one other attack vector and how it&amp;#8217;s different from CSRF.&lt;/li&gt;

&lt;li&gt;Imagine that your boss reads this and becomes terrified of CSRF. He then asks you to implement CSRF protection on his email client and cell phone. Enlighten him as to why this isn&amp;#8217;t necessary.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>B is for browsers</title>
      <link>http://coyled.comb.html</link>
      <pubDate>Mon, 14 May 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./b</guid>
      <description>&lt;h4 id='what_web_browsers_do'&gt;What web browsers do&lt;/h4&gt;

&lt;p&gt;A web browser does much more than browse the web. For example, it has to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;follow redirects&lt;/li&gt;

&lt;li&gt;encode form data to HTTP&lt;/li&gt;

&lt;li&gt;send and receive cookie data&lt;/li&gt;

&lt;li&gt;fetch asset files&lt;/li&gt;

&lt;li&gt;apply CSS to the page&lt;/li&gt;

&lt;li&gt;execute Javascript included in the page&lt;/li&gt;

&lt;li&gt;send and receive data via AJAX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rails provides several tools to help you make use of these widely-accepted browser features. I am going to cover the first three.&lt;/p&gt;

&lt;h4 id='redirects'&gt;Redirects&lt;/h4&gt;

&lt;p&gt;The most basic example is setting up redirects for the browser to follow.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;redirect_to&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/my/target_page.html&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Including this line will make the browser cancel the current page and load your target page instead. This is useful when you want to prevent users from accessing certain pages unless they are logged in.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;unless&lt;/span&gt; &lt;span class='n'&gt;current_user&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;present?&lt;/span&gt;
      &lt;span class='n'&gt;redirect_to&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/my/login_page.html&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id='form_data'&gt;Form data&lt;/h4&gt;

&lt;p&gt;When a user fills in a web form on your site and presses &amp;#8220;Submit&amp;#8221;, Rails gathers this information in the &lt;em&gt;params&lt;/em&gt; object. For example, if you are setting up a comment form on a blog, you might read the params like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;comment_params&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:comment&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s the same whether you use a Ruby symbol or a quoted string:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;comment_params&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='c1'&gt;# This is the same as the previous line.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then, if you&amp;#8217;re using &lt;a href='/A'&gt;ActiveRecord&lt;/a&gt;, you can use the &lt;em&gt;new&lt;/em&gt; and &lt;em&gt;save&lt;/em&gt; methods to write this to the database:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;new_comment&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;comment_params&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;new_comment&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s that simple!&lt;/p&gt;

&lt;h4 id='cookies'&gt;Cookies&lt;/h4&gt;

&lt;p&gt;Rails also provides a way to access cookies. It&amp;#8217;s pretty obvious:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;cookies&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:user_name&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;tboyd&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Cookies can be used in many ways to enhance the user experience. One common use for a cookie is to provide a shopping cart feature. The following shopping cart will be cleared in 1 year:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;cookies&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:shopping_cart&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='ss'&gt;:value&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1 frisbee&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:expires&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;year&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;from_now&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id='looking_to_the_future'&gt;Looking to the future&lt;/h4&gt;

&lt;p&gt;New browser features are being introduced to the web all the time. I have only covered some of the most widely-accepted ones, but there are already dozens of others to consider. A great resource to track new browser features is &lt;a href='http://www.caniuse.com'&gt;CanIUse.com&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A is for ActiveRecord</title>
      <link>http://coyled.coma.html</link>
      <pubDate>Wed, 09 May 2012 00:00:00 -0400</pubDate>
      <author>coyled@coyled.com (Dave Coyle)</author>
      <guid>http://coyled.com./a</guid>
      <description>&lt;h4 id='how_to_create_a_blog_in_15_steps'&gt;How to create a blog in 15 steps&lt;/h4&gt;

&lt;p&gt;My introduction to Rails in 2008 was by way of a forum post called &lt;a href='http://railsforum.com/viewtopic.php?id=17671'&gt;&amp;#8220;HowTo Create a Rails Blog in 15 steps without nested resources + AJAX.&amp;#8221;&lt;/a&gt; The author&amp;#8217;s tutorial is now outdated, but the part on ActiveRecord is still relevant.&lt;/p&gt;

&lt;p&gt;In step 9 of his tutorial, the author presents the following code snippets:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Post&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;ActiveRecord&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Base&lt;/span&gt;
      &lt;span class='n'&gt;has_many&lt;/span&gt; &lt;span class='ss'&gt;:comments&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;and&amp;#8230;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Comment&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;ActiveRecord&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Base&lt;/span&gt;
      &lt;span class='n'&gt;belongs_to&lt;/span&gt; &lt;span class='ss'&gt;:post&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;These 6 lines of code do a whole lot of nifty things. Let&amp;#8217;s look at them line by line.&lt;/p&gt;

&lt;h4 id='inheriting_from_activerecordbase'&gt;Inheriting from ActiveRecord::Base&lt;/h4&gt;

&lt;p&gt;The first line defines a &lt;em&gt;Post&lt;/em&gt; class and its relationship to the &lt;em&gt;ActiveRecord::Base&lt;/em&gt; class. &lt;em&gt;Post&lt;/em&gt; &lt;a href='/O'&gt;inherits&lt;/a&gt; from &lt;em&gt;ActiveRecord::Base&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what does Post inherit from ActiveRecord? A whole lot of methods. From them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post.create&lt;/li&gt;

&lt;li&gt;Post.find&lt;/li&gt;

&lt;li&gt;Post.new&lt;/li&gt;

&lt;li&gt;Post.all&lt;/li&gt;

&lt;li&gt;Post.first&lt;/li&gt;

&lt;li&gt;Post.last&lt;/li&gt;

&lt;li&gt;Post.destroy_all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ActiveRecord is designed to save Posts in the &amp;#8220;posts&amp;#8221; table in your &lt;a href='/D'&gt;database&lt;/a&gt; by inferring the name of the table from the name of the class.&lt;/p&gt;

&lt;h4 id='attribute_methods'&gt;Attribute methods&lt;/h4&gt;

&lt;p&gt;ActiveRecord finds out the attributes of a Post by reading the &amp;#8220;posts&amp;#8221; table, and then gives you many more methods related to these attributes.&lt;/p&gt;

&lt;p&gt;In this example, a Post can have a title and a body. So, you can use the following methods to write to a Post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;post.title = &amp;#8221;I&amp;#8217;m learning Rails!&amp;#8221;&lt;/li&gt;

&lt;li&gt;post.body = &amp;#8220;Help!&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;#8230;and the following methods to read a Post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;post.title &lt;br /&gt; =&amp;gt; &amp;#8221;I&amp;#8217;m learning Rails!&amp;#8221;&lt;/li&gt;

&lt;li&gt;post.body &lt;br /&gt; =&amp;gt; &amp;#8220;Help!&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other methods generated by ActiveRecord, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post.find_by_title(&amp;#8221;I&amp;#8217;m learning Rails!&amp;#8221;)&lt;/li&gt;

&lt;li&gt;Post.find_by_body(&amp;#8220;Help!&amp;#8221;)&lt;/li&gt;

&lt;li&gt;Post.where(:title =&amp;gt; &amp;#8221;I&amp;#8217;m learning Rails!&amp;#8221;)&lt;/li&gt;

&lt;li&gt;Post.where(:body =&amp;gt; &amp;#8220;Help!&amp;#8221;)&lt;/li&gt;

&lt;li&gt;post.update_attributes(:title =&amp;gt; &amp;#8221;I&amp;#8217;m still learning Rails!&amp;#8221;)&lt;/li&gt;

&lt;li&gt;post.title_changed?&lt;/li&gt;

&lt;li&gt;post.body_changed?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, all of this is a result of that first line of code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Comment&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;ActiveRecord&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id='associations_in_activerecord'&gt;Associations in ActiveRecord&lt;/h4&gt;

&lt;p&gt;The next line we come to is:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;      &lt;span class='n'&gt;has_many&lt;/span&gt; &lt;span class='ss'&gt;:comments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just like the first line, the second line results in a whole lot of new methods being generated. Here&amp;#8217;s the full list (from the &lt;a href='http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html'&gt;official Rails documentation&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;post.comments&lt;/li&gt;

&lt;li&gt;post.comments =&lt;/li&gt;

&lt;li&gt;post.comment_ids&lt;/li&gt;

&lt;li&gt;post.comment_ids =&lt;/li&gt;

&lt;li&gt;post.comments &amp;#171;&lt;/li&gt;

&lt;li&gt;post.comments.push&lt;/li&gt;

&lt;li&gt;post.comments.concat&lt;/li&gt;

&lt;li&gt;post.comments.build&lt;/li&gt;

&lt;li&gt;post.comments.create&lt;/li&gt;

&lt;li&gt;post.comments.create!&lt;/li&gt;

&lt;li&gt;post.comments.size&lt;/li&gt;

&lt;li&gt;post.comments.length&lt;/li&gt;

&lt;li&gt;post.comments.count&lt;/li&gt;

&lt;li&gt;post.comments.sum&lt;/li&gt;

&lt;li&gt;post.comments.empty?&lt;/li&gt;

&lt;li&gt;post.comments.clear&lt;/li&gt;

&lt;li&gt;post.comments.delete&lt;/li&gt;

&lt;li&gt;post.comments.delete_all&lt;/li&gt;

&lt;li&gt;post.comments.destroy_all&lt;/li&gt;

&lt;li&gt;post.comments.find&lt;/li&gt;

&lt;li&gt;post.comments.exists?&lt;/li&gt;

&lt;li&gt;post.comments.uniq&lt;/li&gt;

&lt;li&gt;post.comments.reset&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='wrapping_up'&gt;Wrapping up&lt;/h4&gt;

&lt;p&gt;The third line of code is:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;which doesn&amp;#8217;t need any explanation, nor do the next three lines; they&amp;#8217;re similar to the first three.&lt;/p&gt;

&lt;p&gt;Perhaps now you see why developers are drawn to Ruby on Rails. Once you&amp;#8217;ve written a few lines of setup code, you already have a large vocabulary of methods for manipulating your data.&lt;/p&gt;</description>
    </item>
    

  </channel> 
</rss>
